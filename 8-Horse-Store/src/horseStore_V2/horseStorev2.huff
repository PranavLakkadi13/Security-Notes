/*
  The functions that we need are:
        mintHorse()  ->  0x61fc6a67
        feedHorse(uint256 horseId)  -> 0xc65e2eaa
        isHappyHorse(uint256 horseId)  -> 0x62134726
        horseIdToFedTimeStamp(uint256 horseId)  -> 0xf163af78
        HORSE_HAPPY_IF_FED_WITHIN  -> 0x8c1d96ae
*/


/* Imports */
#include "../../lib/huffmate/src/data-structures/Hashmap.huff"
#include "../../lib/huffmate/src/utils/CommonErrors.huff"


/* Interfaces */
#define function mintHorse() nonpayable returns ()
#define function feedHorse(uint256 horseId) nonpayable returns ()
#define function isHappyHorse(uint256 horseId) view returns (bool)
#define function horseIdToFedTimeStamp(uint256 horseId) view returns (uint256)
#define function HORSE_HAPPY_IF_FED_WITHIN() view returns (uint256)
#define function totalSupply() view returns (uint256)


/* Constants */
// this is the storage slot for the mapping 
// the mapping is algorithm and the storage slot is the point where the algorithmn is storaged
#define constant HORSE_FED_TIMESTAMP_STORAGE = FREE_STORAGE_POINTER() 
// The below value is a true constant since we stuck a value to it and the above once can be changed
#define constant HORESE_HAPPY_IF_FED_WITHIN_CONST = 0x15180
#define constant TOTAL_SUPPLY = FREE_STORAGE_POINTER()

// "NON_PAYABLE" Revert Message String
#define constant NON_PAYABLE_ERROR = 0xb4e4f4e5f50415941424c45000000000000000000000000000000000000000000
#define constant NON_PAYABLE_LENGTH = 0x0b

/// @notice Reverts if the call has a non-zero value
/// @notice Reverts with message "NON_PAYABLE"
#define macro NON_PAYABLE() = takes (0) returns (0) {
    [NON_PAYABLE_ERROR]      // ["NON_PAYABLE"]
    [NON_PAYABLE_LENGTH]     // [11 (length), "NON_PAYABLE"]
    callvalue iszero         // [msg.value == 0, 11 (length), "NON_PAYABLE"]
    REQUIRE()                // []
}


#define macro CONSTRUCTOR() = takes(0) returns(0) {
    ERC721_CONSTRUCTOR()     // []
}


// the takes is basically what the functions takes from the stack and returns is what is returned back on stack
#define macro MAIN() = takes(0) returns(0) {

    // this part is to see if the msg.value is 0
    callvalue       // [msg.value]
    iszero          // [msg.value = 0]
    iszero          // [bool == 0]
    func_Revert   // [PC_funcSelector, msg.value = 0]
    jumpi           // []


    // this part is to see if the calldata size is more than 4 bytes
    calldatasize    // [calldata_size]
    0x03            // [0x04, calldata_size]
    gt              // [4 > calldata_size]
    func_Revert     // [PC_funcSelector, 4 > calldata_size]
    jumpi

    0x00                // [0]
    calldataload        // [calldata]
    0xe0                // [0xe0, calldata]
    shr                 // [func_selector]
    // dup1                // [func_selector]

    dup1 // [func_selector, func_selector]
    __FUNC_SIG(totalSupply) // [func_sig(totalSupply), func_selector, func_selector]
    eq                      // [(func_sig(totalSupply) == func_selector), func_selector]
    totalSupply             // [totalSupply, (func_sig(totalSupply) == func_selector), func_selector]
    jumpi                   // [func_selector]
    
    // dup1 __FUNC_SIG(feedHorse) eq feedHorse jumpi
    // dup1 __FUNC_SIG(isHappyHorse) eq isHappyHorse jumpi
    // dup1 __FUNC_SIG(horseIdToFedTimeStamp) eq horseIdToFedTimeStamp jumpi
    // dup1 __FUNC_SIG(mintHorse) eq mintHorse jumpi
    // dup1 __FUNC_SIG(HORSE_HAPPY_IF_FED_WITHIN) eq horseHappyIfFedWithin jumpi

    dup1 // [func_selector, func_selector, func_selector]
    __FUNC_SIG(approve) // [func_sig(approve), func_selector, func_selector, func_selector]
    eq                  // [(func_sig(approve) == func_selector), func_selector, func_selector]
    approve             // [approve, (func_sig(approve) == func_selector), func_selector, func_selector]
    jumpi               // [func_selector, func_selector]
    
    dup1                // [func_selector, func_selector, func_selector]
    __FUNC_SIG(setApprovalForAll) // [func_sig(setApprovalForAll), func_selector, func_selector, func_selector]
    eq                            // [(func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    setApprovalForAll             // [setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    jumpi
    dup1                          // [setApprovalForAll, setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    
    __FUNC_SIG(transferFrom)      // [func_sig(transferFrom), setApprovalForAll, setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    eq                            // [(func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    transferFrom                  // [transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    jumpi
    dup1                          // [transferFrom, transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    
    __FUNC_SIG(name)             // [func_sig(name), transferFrom, transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    eq                           // [(func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    name                         // [name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    jumpi
    dup1                         // [name, name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
     
    __FUNC_SIG(symbol)           // [func_sig(symbol), name, name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    eq                           // [(func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    symbol                       // [symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    jumpi
    dup1                         // [symbol, symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    
    __FUNC_SIG(tokenURI)        // [func_sig(tokenURI), symbol, symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    eq                          // [(func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    tokenURI                    // [tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    jumpi
    dup1                        // [tokenURI, tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    
    __FUNC_SIG(supportsInterface)// [func_sig(supportsInterface), tokenURI, tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    eq                           // [(func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    supportsInterface            // [supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    jumpi

    dup1                         // [supportsInterface, supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    __FUNC_SIG(getApproved)      // [func_sig(getApproved), supportsInterface, supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    eq                           // [(func_sig(getApproved) == supportsInterface), supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    getApproved                  // [getApproved, (func_sig(getApproved) == supportsInterface), supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    jumpi
    dup1                         // [getApproved, getApproved, (func_sig(getApproved) == supportsInterface), supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    
    __FUNC_SIG(isApprovedForAll) // [func_sig(isApprovedForAll), getApproved, getApproved, (func_sig(getApproved) == supportsInterface), supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    eq                           // [(func_sig(isApprovedForAll) == getApproved), getApproved, (func_sig(getApproved) == supportsInterface), supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    isApprovedForAll             // [isApprovedForAll, (func_sig(isApprovedForAll) == getApproved), getApproved, (func_sig(getApproved) == supportsInterface), supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    jumpi

    dup1                         // [isApprovedForAll, isApprovedForAll, (func_sig(isApprovedForAll) == getApproved), getApproved, (func_sig(getApproved) == supportsInterface), supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    __FUNC_SIG(balanceOf)        // [func_sig(balanceOf), isApprovedForAll, isApprovedForAll, (func_sig(isApprovedForAll) == getApproved), getApproved, (func_sig(getApproved) == supportsInterface), supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    eq                           // [(func_sig(balanceOf) == isApprovedForAll), isApprovedForAll, (func_sig(isApprovedForAll) == getApproved), getApproved, (func_sig(getApproved) == supportsInterface), supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    balanceOf                    // [balanceOf, (func_sig(balanceOf) == isApprovedForAll), isApprovedForAll, (func_sig(isApprovedForAll) == getApproved), getApproved, (func_sig(getApproved) == supportsInterface), supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    jumpi                        // [isApprovedForAll, (func_sig(isApprovedForAll) == getApproved), getApproved, (func_sig(getApproved) == supportsInterface), supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    
    dup1                         // [isApprovedForAll, isApprovedForAll, (func_sig(isApprovedForAll) == getApproved), getApproved, (func_sig(getApproved) == supportsInterface), supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    __FUNC_SIG(ownerOf)          // [func_sig(ownerOf), isApprovedForAll, isApprovedForAll, (func_sig(isApprovedForAll) == getApproved), getApproved, (func_sig(getApproved) == supportsInterface), supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    eq                           // [(func_sig(ownerOf) == isApprovedForAll), isApprovedForAll, (func_sig(isApprovedForAll) == getApproved), getApproved, (func_sig(getApproved) == supportsInterface), supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    ownerOf                      // [ownerOf, (func_sig(ownerOf) == isApprovedForAll), isApprovedForAll, (func_sig(isApprovedForAll) == getApproved), getApproved, (func_sig(getApproved) == supportsInterface), supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    jumpi

    dup1                         // [ownerOf, ownerOf, (func_sig(ownerOf) == isApprovedForAll), isApprovedForAll, (func_sig(isApprovedForAll) == getApproved), getApproved, (func_sig(getApproved) == supportsInterface), supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    __FUNC_SIG(safeTransferFrom) // [func_sig(safeTransferFrom), ownerOf, ownerOf, (func_sig(ownerOf) == isApprovedForAll), isApprovedForAll, (func_sig(isApprovedForAll) == getApproved), getApproved, (func_sig(getApproved) == supportsInterface), supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    eq                           // [(func_sig(safeTransferFrom) == ownerOf), ownerOf, (func_sig(ownerOf) == isApprovedForAll), isApprovedForAll, (func_sig(isApprovedForAll) == getApproved), getApproved, (func_sig(getApproved) == supportsInterface), supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    safeTransferFrom             // [safeTransferFrom, (func_sig(safeTransferFrom) == ownerOf), ownerOf, (func_sig(ownerOf) == isApprovedForAll), isApprovedForAll, (func_sig(isApprovedForAll) == getApproved), getApproved, (func_sig(getApproved) == supportsInterface), supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    jumpi
    
    dup1                         // [safeTransferFrom, safeTransferFrom, (func_sig(safeTransferFrom) == ownerOf), ownerOf, (func_sig(ownerOf) == isApprovedForAll), isApprovedForAll, (func_sig(isApprovedForAll) == getApproved), getApproved, (func_sig(getApproved) == supportsInterface), supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    __FUNC_SIG("safeTransferFrom(address,address,uint256,bytes)") // [func_sig("safeTransferFro), safeTransferFrom, safeTransferFrom, (func_sig(safeTransferFrom) == ownerOf), ownerOf, (func_sig(ownerOf) == isApprovedForAll), isApprovedForAll, (func_sig(isApprovedForAll) == getApproved), getApproved, (func_sig(getApproved) == supportsInterface), supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    eq                                                            // [(func_sig("safeTransferFro) == safeTransferFrom), safeTransferFrom, (func_sig(safeTransferFrom) == ownerOf), ownerOf, (func_sig(ownerOf) == isApprovedForAll), isApprovedForAll, (func_sig(isApprovedForAll) == getApproved), getApproved, (func_sig(getApproved) == supportsInterface), supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    safeTransferFromData                                          // [safeTransferFromData, (func_sig("safeTransferFro) == safeTransferFrom), safeTransferFrom, (func_sig(safeTransferFrom) == ownerOf), ownerOf, (func_sig(ownerOf) == isApprovedForAll), isApprovedForAll, (func_sig(isApprovedForAll) == getApproved), getApproved, (func_sig(getApproved) == supportsInterface), supportsInterface, (func_sig(supportsInterface) == tokenURI), tokenURI, (func_sig(tokenURI) == symbol), symbol, (func_sig(symbol) == name), name, (func_sig(name) == transferFrom), transferFrom, (func_sig(transferFrom) == setApprovalForAll), setApprovalForAll, (func_sig(setApprovalForAll) == func_selector), func_selector, func_selector]
    jumpi// [func_selector, func_selector, func_selector]



    __FUNC_SIG(mintHorse)         // [0x61fc6a67,func_selector,func_selector]
    eq                            // [bool, func_selector]
    mint_horse                    // [PC_mintHorse, bool, func_selector]
    jumpi                         // [func_selector]
    dup1                          // [func_selector, func_selector]

    __FUNC_SIG(feedHorse)         // [0xc65e2eaa,func_selector,func_selector]
    eq                            // [bool, func_selector]
    feed_horse                    // [PC_feedHorse, bool, func_selector]
    jumpi                         // [func_selector]
    dup1                         // [func_selector, func_selector]

    __FUNC_SIG(isHappyHorse)      // [0x62134726,func_selector,func_selector]
    eq                            // [bool, func_selector]
    is_happy_horse                // [PC_isHappyHorse, bool, func_selector]
    jumpi                         // [func_selector]
    dup1                          // [func_selector, func_selector]

    __FUNC_SIG(horseIdToFedTimeStamp)  // [0xf163af78,func_selector,func_selector]
    eq                            // [bool, func_selector]
    horse_id_to_fed_time_stamp    // [PC_horseIdToFedTimeStamp, bool, func_selector]
    jumpi                         // [func_selector]

    __FUNC_SIG(HORSE_HAPPY_IF_FED_WITHIN)  // [0x8c1d96ae,func_selector]
    eq                            // [bool]
    horse_happy_if_fed_within     // [PC_horseHappyIfFedWithin, bool]
    jumpi                         // []


    0x00            // [0x00]
    0x00            // [0x00, 0x00]
    revert          // []


    totalSupply:
        TOTALSUPPLY()

    is_happy_horse:
          IS_HAPPY_HORSE()

    horse_id_to_fed_time_stamp:
            HORSE_ID_TO_FED_TIME_STAMP()

    horse_happy_if_fed_within:
            HORSE_HAPPY_IF_FED_WITHIN()

    mint_horse:
          MINT_HORSE()

    func_Revert:
          FUNC_REVERT()

    feed_horse:
          FEED_HORSE()
          
    approve:
        APPROVE()     
        
    setApprovalForAll:
        SET_APPROVAL_FOR_ALL()
        
    transferFrom:
        TRANSFER_FROM()       
    name:
        NAME()                
        
    symbol:
        SYMBOL()              
        
    tokenURI:
        TOKEN_URI()           
        
    supportsInterface:
        SUPPORTS_INTERFACE()  
        
    getApproved:
        GET_APPROVED()        
        
    isApprovedForAll:
        IS_APPROVED_FOR_ALL() 
        
    balanceOf:
        BALANCE_OF()          
        
    ownerOf:
        OWNER_OF()            
        
    safeTransferFrom:
        SAFE_TRANSFER_FROM()  
        
    safeTransferFromData:
        SAFE_TRANSFER_FROM_WITH_DATA()
}


#define macro TOTALSUPPLY() = takes(0) returns(0) {
    [TOTAL_SUPPLY]    // [total_supply_ptr]
    sload             // [total_supply]
    0x00              // [0x00, total_supply]
    mstore            // []       // Memory : [0x00 -> total_supply]

    0x20              // [0x20]   // Memory : [0x00 -> total_supply, 0x20]
    0x00              // [0x00, 0x20]  // Memory : [0x00 -> total_supply, 0x20]
    return            // [total_supply]
}

#define macro HORSE_HAPPY_IF_FED_WITHIN() = takes(0) returns(0) {
    [HORESE_HAPPY_IF_FED_WITHIN_CONST]// [HORSE_HAPPY_IF_FED_WITHIN]
    0x00                       // [0x00, constant]
    mstore                     // []       // Memory : [0x00 -> constant]
    
    0x20                        // [0x20]   // Memory : [0x00 -> constant, 0x20]
    0x00                        // [0x00, 0x20]  // Memory : [0x00 -> constant, 0x20]
    return                      // [constant]
}

#define macro HORSE_ID_TO_FED_TIME_STAMP() = takes(0) returns(0) {
    0x04                // [0x04]
    calldataload        // [horseId]
    [HORSE_FED_TIMESTAMP_STORAGE] // [storage_slot, horseId]
    LOAD_ELEMENT_FROM_KEYS(0x00)    // [last_updated_timestamp]

    0x00                            // [0x00, last_updated_timestamp]
    mstore                          // []       // Memory : [0x00 -> last_updated_timestamp]

    0x20                            // [0x20]   // Memory : [0x00 -> last_updated_timestamp, 0x20]
    0x00                            // [0x00, 0x20]  // Memory : [0x00 -> last_updated_timestamp, 0x20]
    return                         // []    
}


#define macro IS_HAPPY_HORSE() = takes(0) returns(0) {
    0x04                // [0x04]
    calldataload        // [key]
    [HORSE_FED_TIMESTAMP_STORAGE] // [storage_slot, key]
    LOAD_ELEMENT_FROM_KEYS(0x00)    // [last_updated_timestamp]
    timestamp           // [timestamp, last_updated_timestamp]
    
    dup2                // [last_updated_timestamp, timestamp, last_updated_timestamp]
    dup2                // [timestamp, last_updated_timestamp, timestamp, last_updated_timestamp]
    sub                 // [diff, timestamp, last_updated_timestamp]
    
    [HORESE_HAPPY_IF_FED_WITHIN_CONST] // [constant, diff, timestamp, last_updated_timestamp]
    gt                  // [bool, timestamp, last_updated_timestamp]
    start_return_true   // [timestamp, last_updated_timestamp]
    jumpi               // [timestamp, last_updated_timestamp]

    eq                  // [bool]
    start_return       // [bool]
    jump
    
    stop

    start_return_true:
    0x01                // [0x01, timestamp, last_updated_timestamp]


    start_return:
    0x00                // [0x00, bool]
    mstore              // [bool]
    0x20                // [0x20, bool]
    0x00                // [0x00, 0x20, bool]
    return
}


#define macro FUNC_REVERT() = takes(0) returns(0) {
    0x00            // [0x00]
    0x00            // [0x00, 0x00]
    revert          // []
}


#define macro FEED_HORSE() = takes(0) returns(0) {
    0x04                // [0x04]
    calldatasize        // [calldatasize, 0x04]
    sub                 // [size]
    dup1
    dup3
    swap1               
    lt                  // [stack_underflow]
    func_Revert         // [func_Revert, stack_underflow]
    jumpi               // []

    0x20                // [0x20, size]
    eq                  // [bool]
    iszero              // [bool(bool)]
    func_Revert         // [PC_revert, bool(bool)]
    jumpi               // []

    timestamp           // [timestamp]
    0x04                // [0x04, timestamp]
    calldataload        // [key, timestamp]
    [HORSE_FED_TIMESTAMP_STORAGE] // [storage_slot, key, timestamp]
    STORE_ELEMENT_FROM_KEYS(0x00)
    
    stop

    func_Revert:
        FUNC_REVERT()

}


#define macro MINT_HORSE() = takes(0) returns(0) {
    [TOTAL_SUPPLY]    // [total_supply_ptr]
    sload             // [total_supply]
    dup1              // [total_supply, total_supply]
    caller            // [msg.sender, total_supply, total_supply]
    _MINT()           // [total_supply]

    0x01              // [0x01, total_supply]
    add               // [total_supply + 1]
    [TOTAL_SUPPLY]    // [total_supply_ptr, total_supply + 1]
    sstore            // []
    stop
}

////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
///////////////// Imported from HUFFMATE ///////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

// Interface
#define function name() nonpayable returns (string)
#define function symbol() nonpayable returns (string)
#define function tokenURI(uint256) nonpayable returns (string)

#define function mint(address, uint256) payable returns ()
#define function burn(uint256) nonpayable returns ()

#define function transfer(address,uint256) nonpayable returns ()
#define function transferFrom(address,address,uint256) nonpayable returns ()
#define function safeTransferFrom(address,address,uint256) nonpayable returns ()
#define function safeTransferFrom(address,address,uint256,bytes) nonpayable returns ()

#define function approve(address,uint256) nonpayable returns ()
#define function setApprovalForAll(address,bool) nonpayable returns ()

#define function getApproved(uint256) view returns (address)
#define function isApprovedForAll(address,address) view returns (bool)
#define function ownerOf(uint256) view returns (address)
#define function balanceOf(address) view returns (uint256)
#define function supportsInterface(bytes4) view returns (bool)

// Events
#define event Transfer(address,address,uint256)
#define event Approval(address,address,uint256)
#define event ApprovalForAll(address,address,bool)

// Storage Slots
#define constant OWNER_LOCATION = FREE_STORAGE_POINTER()
#define constant BALANCE_LOCATION = FREE_STORAGE_POINTER()
#define constant SINGLE_APPROVAL_LOCATION = FREE_STORAGE_POINTER()

// Immutables offsets
#define constant NAME_OFFSET =          0x0000000000000000000000000000000000000000000000000000000000000080
#define constant NAME_LENGTH_OFFSET =   0x00000000000000000000000000000000000000000000000000000000000000a0
#define constant SYMBOL_OFFSET =        0x0000000000000000000000000000000000000000000000000000000000000020
#define constant SYMBOL_LENGTH_OFFSET = 0x0000000000000000000000000000000000000000000000000000000000000040

/// >>>>>>>>>>>>>>>>>>>>>  CONSTRUCTOR  <<<<<<<<<<<<<<<<<<<<<< ///

/// @notice Constructor
#define macro ERC721_CONSTRUCTOR() = takes (0) returns (0) {
    // Constructor arguments:
    // ?, name_size, name, ?, symbol_size, symbol

    // This constructor will return the runtime bytecode with all the 
    // constructor arguments concatenated at the end.
    
    // Copy the runtime bytecode with constructor argument concatenated.
    0xb                                     // [offset] - constructor code size
    dup1                                    // [offset, offset]
    codesize                                // [total_size, offset, offset]
    sub                                     // [runtime_size, offset]
    dup1                                    // [runtime_size, runtime_size, offset]
    swap2                                   // [offset, runtime_size, runtime_size]
    returndatasize                          // [return_offset, offset, runtime_size, runtime_size]
    codecopy                                // [runtime_size]

    // Return the runtime bytecode.
    returndatasize                          // [return_offset, runtime_size]
    return                                  // []
}

/// >>>>>>>>>>>>>>>>>>>>>  VIEW FUNCTIONS  <<<<<<<<<<<<<<<<<<<<<< ///

/// @notice Name
/// @notice Returns the token name string
#define macro NAME() = takes (0) returns (0) {
    NON_PAYABLE()                               // []
    _GET_IMMUTABLE(NAME_OFFSET, 0x00)           // [name_value]
    _GET_IMMUTABLE(NAME_LENGTH_OFFSET, 0x00)    // [name_length, name_value]
    0x20 0x00 mstore                            // [name_length, name_value]
    0x20 mstore                                 // [name_value]
    0x40 mstore                                 // []
    0x60 0x00 return                            // []
}

/// @notice Symbol
/// @notice Returns the symbol of the token
#define macro SYMBOL() = takes (0) returns (0) {
    NON_PAYABLE()                               // []
    _GET_IMMUTABLE(SYMBOL_OFFSET, 0x00)         // [symbol_value]
    _GET_IMMUTABLE(SYMBOL_LENGTH_OFFSET, 0x00)  // [symbol_length, symbol_value]
    0x20 0x00 mstore                            // [symbol_length, symbol_value]
    0x20 mstore                                 // [symbol_value]
    0x40 mstore                                 // []
    0x60 0x00 return                            // []
}

/// @notice Balance Of
/// @notice Returns the balance of the given address
#define macro BALANCE_OF() = takes (0) returns (0) {
    NON_PAYABLE()                                       // []
    0x04 calldataload                                   // [account]
    // revert if account is zero address
    dup1 continue jumpi 
    ZERO_ADDRESS(0x00)
    continue:
    [BALANCE_LOCATION] LOAD_ELEMENT_FROM_KEYS(0x00)     // [balance]
    0x00 mstore                                         // []
    0x20 0x00 return                                    // []
}

/// @notice Owner Of
/// @notice Returns the owner of the given token id
#define macro OWNER_OF() = takes (0) returns (0) {
    0x04 calldataload                               // [tokenId]
    [OWNER_LOCATION] LOAD_ELEMENT_FROM_KEYS(0x00)   // [owner]
    // revert if owner is zero address/not minted
    dup1 continue jumpi
    NOT_MINTED(0x00)
    continue:
    0x00 mstore                                     // []
    0x20 0x00 return                                // []
}

/// @notice Is Approved For All
/// @notice Returns whether the given operator is approved for all tokens of the given owner
#define macro IS_APPROVED_FOR_ALL() = takes (0) returns (0) {
    0x24 calldataload               // [to]
    0x04 calldataload               // [from, to]
    LOAD_ELEMENT_FROM_KEYS(0x00)    // [value]
    0x00 mstore                     // []
    0x20 0x00 return                // []
}

/// @notice Get Approved
/// @notice Returns the approved address for the given token id
#define macro GET_APPROVED() = takes (0) returns (0) {
    0x04 calldataload               // [tokenId]
    [SINGLE_APPROVAL_LOCATION]      // [approval_slot, tokenId]
    LOAD_ELEMENT_FROM_KEYS(0x00)    // [spender]
    0x00 mstore                     // []
    0x20 0x00 return                // []
}

/// @notice Token URI
#define macro TOKEN_URI() = takes (0) returns (0) {
    0x20 0x00 mstore
    0x00 0x20 mstore
    0x40 0x00 return
}

/// @notice Checks if the given interface is supported
#define macro SUPPORTS_INTERFACE() = takes (0) returns (0) {
    // grab interfaceId
    0x04 calldataload       // [interfaceId]
    0xe0 shr                // [right_aligned_interfaceId]

    // Check if erc165 interfaceId
    dup1                    // [interfaceId, interfaceId]
    0x01ffc9a7 eq           // [is_erc165, interfaceId]
    is_interface jumpi

    // Check if erc721 interfaceId
    dup1                    // [interfaceId, interfaceId]
    0x80ac58cd eq           // [is_erc721, interfaceId]
    is_interface jumpi

    // Check if erc721Metadata interfaceId
    0x5b5e139f eq           // [is_erc721Metadata]
    is_interface jumpi

    // Return false (0x00)
    0x00 mstore             // []
    0x20 0x00 return        // []

    // Return true (0x01)
    is_interface:
        pop                 // []
        0x01 0x00 mstore    // []
        0x20 0x00 return    // []
}

/// >>>>>>>>>>>>>>>>>>>>>  INTERNAL FUNCTIONS  <<<<<<<<<<<<<<<<<<<<<< ///

/// @notice Mint
/// @notice Mints a new token
/// @dev The Mint function is payable
#define macro _MINT() = takes (2) returns (0) {
    // Input stack:                                 // [to, tokenId]
    // Output stack:                                // []

    // Check that the recipient is valid
    dup1 iszero invalid_recipient jumpi             // [to, tokenId]

    // Create the minting params
    0x00 dup3                                       // [tokenId, from (0x00), to, tokenId]

    // Check token ownership
    [OWNER_LOCATION] LOAD_ELEMENT_FROM_KEYS(0x00)   // [owner, from (0x00), to, tokenId]
    unauthorized jumpi

    // Give tokens to the recipient.
    TRANSFER_GIVE_TO()                              // [from (0x00), to, tokenId]

    // Emit the transfer event.
    __EVENT_HASH(Transfer)                          // [sig, from (0x00), to, tokenId]
    0x00 0x00 log4                                  // []

    // Continue Executing
    cont jump

    invalid_recipient:
        INVALID_RECIPIENT(0x00)

    unauthorized:
        ALREADY_MINTED(0x00)

    cont:
}

/// @notice Burn
/// @notice Burns the token with the given id
#define macro _BURN() = takes (1) returns (0) {
    // Input stack:                                 // [tokenId]
    NON_PAYABLE()                                   // [tokenId]

    dup1                                            // [tokenId, tokenId]
    [OWNER_LOCATION] LOAD_ELEMENT_FROM_KEYS(0x00)   // [owner, tokenId]

    // Check that the recipient is valid
    dup1 iszero                                     // [owner == 0, owner, tokenId]
    not_minted jumpi                                // [owner, tokenId]

    // Create the burning params
    0x00 swap1                                      // [owner, to (0x00), tokenId]

    // Reduce the balance of owner by 1
    0x01 dup2                                       // [owner, 1, owner, to, tokenId]
    [BALANCE_LOCATION] LOAD_ELEMENT_FROM_KEYS(0x00) // [balance, 1, owner, to, tokenId]
    sub dup2                                        // [owner, balance-1, owner, to, tokenId]
    [BALANCE_LOCATION]
    STORE_ELEMENT_FROM_KEYS(0x00)                   // [owner, to, tokenId]

    // Set the owner of the token to 0x00
    0x00 dup4 [OWNER_LOCATION]                      // [slot, owner, 0x00, owner, to, tokenId]
    STORE_ELEMENT_FROM_KEYS(0x00)                   // [owner, to, tokenId]

    // Set the approval of the token to 0x00 for the owner
    0x00 dup4 [SINGLE_APPROVAL_LOCATION]            // [slot, owner, 0x00, owner, to, tokenId]
    STORE_ELEMENT_FROM_KEYS(0x00)                   // [owner, to, tokenId]

    // Emit the transfer event.
    __EVENT_HASH(Transfer)                          // [sig, owner, to (0x00), tokenId]
    0x00 0x00                                       // [0, 0, sig, owner, to (0x00), tokenId]
    log4                                            // []

    // Continue Executing
    cont jump

    not_minted:
        NOT_MINTED(0x00)

    cont:
}

/// @notice Retrives an "immutable" from the runtime bytecode.
#define macro _GET_IMMUTABLE(offset_end, free_memory) = takes (0) returns (1) {
    0x20                        // [size]
    <offset_end> codesize sub   // [offset_code, size]
    <free_memory>               // [offset_memory, offset_code, size]
    codecopy                    // []
    <free_memory> mload         // [value]
}

/// >>>>>>>>>>>>>>>>>>>>>  EXTERNAL FUNCTIONS  <<<<<<<<<<<<<<<<<<<<<< ///

/// @notice Approve
/// @notice Approves a spender for a specific token
#define macro APPROVE() = takes (0) returns (0) {
    // Load the token owner
    0x24 calldataload dup1          // [tokenId, tokenId]
    [OWNER_LOCATION]
    LOAD_ELEMENT_FROM_KEYS(0x00)    // [owner, tokenId]
    dup1 caller eq                  // [is_sender_owner, owner, tokenId]

    // Check if approved for all
    caller dup3                     // [owner, msg.sender, is_sender_owner, owner, tokenId]
    LOAD_ELEMENT_FROM_KEYS(0x00)    // [is_approved_for_all, is_sender_owner, owner, tokenId]]
    or cont jumpi                   // [owner, tokenId]
        not_authorized jump
    cont:

    // Store approval
    0x04 calldataload dup1 dup4     // [tokenId, spender, spender, owner, tokenId]
    [SINGLE_APPROVAL_LOCATION]
    STORE_ELEMENT_FROM_KEYS(0x00)   // [spender, owner, tokenId]
    swap1                           // [owner, spender, tokenId]

    // Emit the approval event
    __EVENT_HASH(Approval)                          // [sig, owner, spender, tokenId]
    0x00 0x00 log4                                  // []

    stop

    not_authorized:
        UNAUTHORIZED(0x00)
}

/// @notice Set Approval For All
/// @notice Sets an operator as approved for all tokens of the caller
#define macro SET_APPROVAL_FOR_ALL() = takes (0) returns (0) {
    // Store the operator as approved for all
    0x24 calldataload                               // [approved]
    0x04 calldataload                               // [operator, approved]
    caller                                          // [msg.sender, operator, approved]
    STORE_ELEMENT_FROM_KEYS(0x00)                   // []

    // Emit the ApprovalForAll event
    0x24 calldataload                               // [approved]
    0x04 calldataload                               // [operator, approved]
    caller                                          // [msg.sender, operator, approved]
    __EVENT_HASH(ApprovalForAll)                    // [sig, owner, operator]
    0x00 0x00                                       // [0, 32, sig, owner, operator]
    log4                                            // []

    // Stop execution
    stop
}

/// @notice Transfer From
/// @notice Transfers a token from one address to another
#define macro TRANSFER_FROM() = takes (0) returns (0) {
    // Setup the stack for the transfer function.
    0x44 calldataload       // [tokenId]
    0x24 calldataload       // [to, tokenId]
    0x04 calldataload       // [from, to, tokenId]

    // Accounting Logic
    TRANSFER_TAKE_FROM()    // [from, to, tokenId]
    TRANSFER_GIVE_TO()      // [from, to, tokenId]

    // Emit the transfer event
    __EVENT_HASH(Transfer)  // [sig,from, to, tokenId]
    0x20 0x00 log4          // []

    // Stop execution
    stop
}

/// @notice Safe Transfer From
#define macro SAFE_TRANSFER_FROM() = takes (0) returns (0) {
    // Setup the stack for the transfer function.
    0x44 calldataload       // [tokenId]
    0x24 calldataload       // [to, tokenId]
    0x04 calldataload       // [from, to, tokenId]

    TRANSFER_TAKE_FROM()    // [from, to, tokenId]
    TRANSFER_GIVE_TO()      // [from, to, tokenId]

    // Emit the transfer event
    __EVENT_HASH(Transfer)  // [sig, from, to, tokenId]
    0x00 0x00 log4          // []

    // Make sure we can transfer to the recipient
    0x24 calldataload       // [to]
    dup1 extcodesize        // [to.code.length, to]
    iszero safe jumpi       // [to]

    // onERC721Received Selector
    0x150b7a02 dup1         // [onERC721Received, onERC721Received, to]
    0xE0 shl                // [onERC721Received_shifted, onERC721Received, to]

    // Store the left-shifted selector for call
    0x20 mstore             // [onERC721Received, to]

    // Store the msg.sender as the first arg
    caller 0x24 mstore      // [onERC721Received, to]

    // Store from as the second arg
    0x04 calldataload       // [from, onERC721Received, to]
    0x44 mstore             // [onERC721Received, to]

    // Id is the third arg
    0x44 calldataload       // [tokenId, onERC721Received, to]
    0x64 mstore             // [onERC721Received, to]

    // Blank bytes array as 4th arg (no data)
    0x80 0x84 mstore
    0x00 0xA4 mstore

    // Call address(to).onERC721Received(msg.sender, from, tokenId, "")
    0x20                    // [retSize, onERC721Received, to]
    0x00                    // [retOffset, retSize, onERC721Received, to]
    0xA4                    // [argSize, retOffset, retSize, onERC721Received, to]
    dup3                    // [argOffset, argSize, retOffset, retSize, onERC721Received, to]
    dup3                    // [value, argOffset, argSize, retOffset, retSize, onERC721Received, to]
    dup7                    // [to, value, argOffset, argSize, retOffset, retSize, onERC721Received, to]
    gas                     // [gas, to, value, argOffset, argSize, retOffset, retSize, onERC721Received, to]
    call                    // [success, onERC721Received, to]

    // Revert if call isn't successful
    cont jumpi              // [onERC721Received, to]
    0x00 dup1 revert
    cont:

    // Compare the return data to the onERC721Received selector
    0x00 mload 0xE0 shr     // [response, onERC721Received, to]
    eq safe jumpi           // [to]

    // Revert if the return data is not accepted
    UNSAFE_RECIPIENT(0x00)

    // Stop execution if safe
    safe:
    stop
}

#define macro SAFE_TRANSFER_FROM_WITH_DATA() = takes (0) returns (0) {
    // Setup the stack for the transfer function.
    0x44 calldataload       // [tokenId]
    0x24 calldataload       // [to, tokenId]
    0x04 calldataload       // [from, to, tokenId]

    TRANSFER_TAKE_FROM()    // [from, to, tokenId]
    TRANSFER_GIVE_TO()      // [from, to, tokenId]

    // Emit the transfer event.
    __EVENT_HASH(Transfer)  // [sig, from, to, tokenId]
    0x00 0x00 log4          // []

    // Make sure we can transfer to the recipient
    0x24 calldataload       // [to]
    dup1 extcodesize        // [to.code.length, to]
    iszero safe jumpi       // [to]

    // onERC721Received Selector
    0x150b7a02 dup1         // [onERC721Received, onERC721Received, to]
    0xE0 shl                // [onERC721Received_shifted, onERC721Received, to]

    // Store the left-shifted selector for call
    0x20 mstore             // [onERC721Received, to]

    // Store the msg.sender as the first arg
    caller 0x24 mstore      // [onERC721Received, to]

    // Store from as the second arg
    0x04 calldataload       // [from, onERC721Received, to]
    0x44 mstore             // [onERC721Received, to]

    // Id is the third arg
    0x44 calldataload       // [tokenId, onERC721Received, to]
    0x64 mstore             // [onERC721Received, to]

    0x84 calldataload       // [len(data), onERC721Received, to]
    0x05 shl                // [len(data) * 0x20, onERC721Received, to]
    0x40 add                // [len(data) * 0x20 + 0x40, onERC721Received, to]
    dup1                    // [len(data) * 0x20 + 0x40, len(data) * 0x20 + 0x40, onERC721received, to]
    0x64                    // [0x64, len(data) * 0x20 + 0x40, len(data) * 0x20 + 0x40, onERC721received, to]
    0x84                    // [0x20, 0x64, len(data) * 0x20 + 0x40, len(data) * 0x20 + 0x40, onERC721received, to]
    calldatacopy            // [len(bytes), onERC721received, to]

    // Call address(to).onERC721Received(msg.sender, from, tokenId, bytes)
    0x20                    // [retSize, len(bytes), onERC721Received, to]
    0x00                    // [retOffset, retSize, len(bytes), onERC721Received, to]
    swap1 swap2             // [len(bytes), retOffset, retSize, onERC721Received, to]
    0x64 add                // [argSize, retOffset, retSize, onERC721Received, to]
    dup3                    // [argOffset, argSize, retOffset, retSize, len(bytes), onERC721Received, to]
    dup3                    // [value, argOffset, argSize, retOffset, retSize, len(bytes), onERC721Received, to]
    dup7                    // [to, value, argOffset, argSize, retOffset, retSize, len(bytes), onERC721Received, to]
    gas                     // [gas, to, value, argOffset, argSize, retOffset, retSize, len(bytes), onERC721Received, to]
    call                    // [success, len(bytes), onERC721Received, to]

    // Revert if call isn't successful
    cont jumpi              // [len(bytes), onERC721Received, to]
    0x00 dup1 revert
    cont:

    // Compare the return data to the onERC721Received selector
    0x00 mload 0xE0 shr     // [response, onERC721Received, to]
    eq safe jumpi           // [to]

    // Revert if the return data is not accepted
    UNSAFE_RECIPIENT(0x00)

    // Stop execution if safe
    safe:
    stop
}

/// >>>>>>>>>>>>>>>>>>>>>  INTERNAL HELPERS  <<<<<<<<<<<<<<<<<<<<<< ///

/// @notice Internal Macro to update Transfer from accounting
#define macro TRANSFER_TAKE_FROM() = takes (3) returns (3) {
    // Input stack: [from, to, tokenId]

    // If from !== ownerOf[tokenId] revert with "WRONG_FROM"
    dup1 dup4                                       // [tokenId, from, from, to, tokenId]
    [OWNER_LOCATION] LOAD_ELEMENT_FROM_KEYS(0x00)   // [owner, from, from, to, tokenId]
    eq cont jumpi                                   // [from, to, tokenId]
    WRONG_FROM(0x00)
    cont:

    // If to === address(0) revert with "INVALID_RECIPIENT"
    dup2 continue jumpi                             // [from, to, tokenId]
    INVALID_RECIPIENT(0x00)
    continue:

    // Check if msg.sender == from
    dup1 caller eq                                  // [msg.sender == from, from, to, tokenId]
    is_authorized jumpi                             // [from, to, tokenId]

    // Check if approved for all
    caller dup2                                     // [from, msg.sender, from, to, tokenId]
    LOAD_ELEMENT_FROM_KEYS(0x00)                    // [is_approved_for_all, from, to, tokenId]
    is_authorized jumpi                             // [from, to, tokenId]

    // Check if approved for tokenId
    dup3                                            // [tokenId, from, to, tokenId]
    [SINGLE_APPROVAL_LOCATION]                      // [SINGLE_APPROVAL_LOCATION, tokenId, from, to, tokenId]
    LOAD_ELEMENT_FROM_KEYS(0x00)                    // [address_approved_for_tokenId, from, to, tokenId]
    caller eq is_authorized jumpi                   // [from, to, tokenId]

    // If msg.sender != from && !isApprovedForAll[from][msg.sender] && msg.sender != getApproved[id],
    UNAUTHORIZED(0x00)

    is_authorized:

    // Update balance of from
    0x01 dup2                                       // [from, 1, from, to, tokenId]
    [BALANCE_LOCATION] LOAD_ELEMENT_FROM_KEYS(0x00) // [balance, 1, from, to, tokenId]
    sub dup2                                        // [from, balance-1, from, to, tokenId]
    [BALANCE_LOCATION]
    STORE_ELEMENT_FROM_KEYS(0x00)                   // [from, to, tokenId]
}

/// @notice Internal Macro to update Transfer to accounting
#define macro TRANSFER_GIVE_TO() = takes (3) returns (3) {
    // retrieve balance
    // input stack:                 // [from, to, tokenId]
    dup2                            // [to, from, to, tokenId]
	[BALANCE_LOCATION]              // [balance_slot, to, from, to, tokenId]
    LOAD_ELEMENT_FROM_KEYS(0x00)    // [balance, from, to, tokenId]
    0x01 add                        // [balance+1, from, to, tokenId]

    // update balance
	dup3                            // [to, balance+1, from, to, tokenId]
    [BALANCE_LOCATION]              // [balance_slot, to, balance+1, from, to, tokenId]
    STORE_ELEMENT_FROM_KEYS(0x00)   // [from, to, tokenId]

    // update ownerOf
    dup2 dup4                       // [tokenId, to, from, to, tokenId]
    [OWNER_LOCATION]                // [owner_slot, tokenId, to, from, to, tokenId]
    STORE_ELEMENT_FROM_KEYS(0x00)   // [from, to, tokenId]

    // update approval
    0x00 dup4                       // [tokenId, address(0), from, to, tokenId]
    [SINGLE_APPROVAL_LOCATION]      // [approval_slot, tokenId, address(0), from, to, tokenId]
    STORE_ELEMENT_FROM_KEYS(0x00)   // [from, to, tokenId]
}
